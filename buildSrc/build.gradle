plugins {
	id "java-gradle-plugin"
	id "java"
	id "groovy"
	id 'com.apollographql.apollo' version '2.4.5'
}

sourceCompatibility = JavaVersion.VERSION_17

repositories {
	gradlePluginPortal()
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

sourceSets {
	main {
		java {
			srcDirs = []
		}
		groovy {
			srcDirs += ["src/main/java"]
		}
	}
}

gradlePlugin {
	plugins {
		checkAntoraVersion {
			id = "org.springframework.antora.check-version"
			implementationClass = "org.springframework.gradle.antora.AntoraVersionPlugin"
		}
		trang {
			id = "trang"
			implementationClass = "trang.TrangPlugin"
		}
		locks {
			id = "locks"
			implementationClass = "lock.GlobalLockPlugin"
		}
		managementConfiguration {
			id = "io.spring.convention.management-configuration"
			implementationClass = "io.spring.gradle.convention.ManagementConfigurationPlugin"
		}
		updateDependencies {
			id = "org.springframework.security.update-dependencies"
			implementationClass = "org.springframework.security.convention.versions.UpdateDependenciesPlugin"
		}
		updateProjectVersion {
			id = "org.springframework.security.update-version"
			implementationClass = "org.springframework.security.convention.versions.UpdateProjectVersionPlugin"
		}
		sagan {
			id = "org.springframework.security.sagan"
			implementationClass = "org.springframework.gradle.sagan.SaganPlugin"
		}
		githubMilestone {
			id = "org.springframework.github.milestone"
			implementationClass = "org.springframework.gradle.github.milestones.GitHubMilestonePlugin"
		}
		githubChangelog {
			id = "org.springframework.github.changelog"
			implementationClass = "org.springframework.gradle.github.changelog.GitHubChangelogPlugin"
		}
		githubRelease {
			id = "org.springframework.github.release"
			implementationClass = "org.springframework.gradle.github.release.GitHubReleasePlugin"
		}
		s101 {
			id = "s101"
			implementationClass = "s101.S101Plugin"
		}
	}
}

configurations {
	implementation {
		exclude module: 'groovy-all'
	}
}

dependencies {
	implementation platform(libs.io.projectreactor.reactor.bom)

	implementation libs.com.google.code.gson.gson
	implementation libs.com.thaiopensource.trag
	implementation libs.net.sourceforge.saxon.saxon
	implementation libs.org.yaml.snakeyaml
	implementation localGroovy()

	implementation libs.io.github.gradle.nexus.publish.plugin
	implementation 'io.projectreactor:reactor-core'
	implementation libs.org.gretty.gretty
	implementation libs.com.apollographql.apollo.apollo.runtime
	implementation libs.com.github.ben.manes.gradle.versions.plugin
	implementation libs.com.github.spullara.mustache.java.compiler
	implementation libs.io.spring.javaformat.spring.javaformat.gradle.plugin
	implementation libs.io.spring.nohttp.nohttp.gradle
	implementation libs.net.sourceforge.htmlunit
	implementation libs.org.hidetake.gradle.ssh.plugin
	implementation libs.org.jfrog.buildinfo.build.info.extractor.gradle
	implementation libs.org.sonarsource.scanner.gradle.sonarqube.gradle.plugin

	testImplementation platform(libs.org.junit.junit.bom)
	testImplementation platform(libs.org.mockito.mockito.bom)
	testImplementation "org.junit.jupiter:junit-jupiter-api"
	testImplementation "org.junit.jupiter:junit-jupiter-params"
	testImplementation "org.junit.jupiter:junit-jupiter-engine"
	testImplementation libs.org.apache.commons.commons.io
	testImplementation libs.org.assertj.assertj.core
	testImplementation 'org.mockito:mockito-core'
	testImplementation 'org.mockito:mockito-junit-jupiter'
	testImplementation libs.com.squareup.okhttp3.mockwebserver
}


tasks.named('test', Test).configure {
	onlyIf { !project.hasProperty("buildSrc.skipTests") }
	useJUnitPlatform()
	jvmArgs(
			'--add-opens', 'java.base/java.lang=ALL-UNNAMED',
			'--add-opens', 'java.base/java.util=ALL-UNNAMED'
	)
}
